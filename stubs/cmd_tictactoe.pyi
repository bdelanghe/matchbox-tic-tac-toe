import numpy as np
from cmd import Cmd
from collections import namedtuple
from typing import Any, Optional, Tuple

fig: Any

Square = namedtuple('Square', ['y', 'x'])

class CmdMode(Cmd):
    doc_leader: str = ...
    doc_header: str = ...
    ruler: str = ...
    def do_bye(self, line: Any): ...
    def do_new_game(self, line: Any) -> None: ...
    def do_name(self, line: Any) -> None: ...
    def do_move(self, line: Any) -> None: ...
    def do_score(self, line: Any) -> None: ...
    session: Any = ...
    players: Any = ...
    def __init__(self) -> None: ...
    @property
    def prompt(self): ...
    @property
    def last_simple(self): ...
    def emptyline(self) -> None: ...
    def default(self, line: Any) -> None: ...
    def preloop(self) -> None: ...
    def postloop(self) -> None: ...
    def precmd(self, line: Any): ...
    def postcmd(self, stop: Any, line: Any): ...
    def message_handler(self, message: tuple) -> Any: ...

class Player:
    number: Any = ...
    name: Any = ...
    wins: int = ...
    ties: int = ...
    def __init__(self, number: int) -> None: ...

class Session:
    current_game: Any = ...
    def new_game(self, n_by: int=...) -> None: ...
    players: Any = ...
    play_count: int = ...
    def __init__(self) -> None: ...
    @property
    def first_move(self) -> int: ...

class Game:
    marks: Any = ...
    def square_input(self, sqr: Square) -> Optional[Tuple]: ...
    n_by: Any = ...
    session: Any = ...
    players: Any = ...
    board: Any = ...
    moves: Any = ...
    turns: int = ...
    def __init__(self, session: Any, n_by: Any=...) -> None: ...
    @property
    def current_player(self) -> Player: ...
    @property
    def open_squares(self) -> np.matrix: ...

class Moves:
    def move(self, sqr: Square) -> Optional[Tuple[str, Square]]: ...
    matrix: Any = ...
    def reset_moves(self) -> None: ...
    n_by: Any = ...
    def __init__(self, n_by: Any) -> None: ...

def main() -> None: ...
